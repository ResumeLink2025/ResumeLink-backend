generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  nickname String

  passwordResetTokens PasswordResetToken[]
}

model UserAuth {
  id             String         @id @default(uuid()) @db.Uuid
  email          String         @unique
  password       String?
  authProvider   AuthProvider   @default(local)
  authProviderId String?        @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  refreshTokens  RefreshToken[]
  profile        UserProfile?   @relation("UserToProfile")
  userSkills     UserSkill[]       // UserSkill와의 관계
  desirePositions DesirePosition[] // DesirePosition와의 관계

  @@unique([authProvider, authProviderId])
}

model UserProfile {
  id               String            @id @map("id") @db.Uuid
  nickname         String
  birthday         DateTime?
  gender           Gender?
  customSkill      Json?
  customInterest   Json?
  customPosition   Json?
  experienceYears  Int               @default(0)
  employmentStatus EmploymentStatus?
  imageUrl         String?
  summary          String?           // 자기소개 추가
  updatedAt        DateTime          @updatedAt
  user             UserAuth          @relation("UserToProfile", fields: [id], references: [id])
  resumes          Resume[]
}

model UserSkill {
  id   String   @id @default(uuid()) @db.Uuid
  uid  String   @db.Uuid
  sid  String   @db.Uuid

  user  UserAuth @relation(fields: [uid], references: [id], onDelete: Cascade)
  skill Skill    @relation(fields: [sid], references: [id], onDelete: Cascade)

  @@unique([uid, sid])
  @@index([uid])
  @@index([sid])
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  token     String   @unique
  createdAt DateTime
  expiresAt DateTime
  userAgent String?
  ipAddress String?
  user      UserAuth @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum AuthProvider {
  local
  google
}

enum Gender {
  male
  female
  other
}

enum EmploymentStatus {
  employed
  unemployed
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

// 추후 Project 테이블 작성시 참조하도록 수정
model Resume {
  id             String       @id @default(uuid())
  profile        UserProfile  @relation(fields: [profileId], references: [id])
  profileId      String       @db.Uuid
  title          String
  summary        String?
  experienceNote String?
  theme          Theme        @default(light)
  isPublic       Boolean      @default(false)
  positions      Position[]   @relation("ResumePositions")
  categories     Category[]   @relation("ResumeCategories")
  skills         Skill[]      @relation("ResumeSkills")
  activities     DevelopmentActivity[]
  certificates   Certificate[]
  projects       Project[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum Theme {
  light
  dark
}

model Skill {
  id         String       @id @default(uuid()) @db.Uuid
  name       String       @unique
  userSkills UserSkill[]
  resumes    Resume[]     @relation("ResumeSkills") // 관계 이름도 함께 변경
}

model DevelopmentActivity {
  id          String    @id @default(uuid())
  resume      Resume    @relation(fields: [resumeId], references: [id])
  resumeId    String
  title       String
  startDate   DateTime
  endDate     DateTime?
  description String?
}

model Certificate {
  id       String    @id @default(uuid())
  resume   Resume    @relation(fields: [resumeId], references: [id])
  resumeId String
  name     String
  date     DateTime?
  grade    String?
  issuer   String? // 발급기관
}

model Project {
  id          String  @id @default(uuid())
  resume      Resume  @relation(fields: [resumeId], references: [id])
  resumeId    String
  name        String
  link        String?
  description String
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  resumes Resume[] @relation("ResumeCategories")
}

model Position {
  id        String            @id @default(uuid()) @db.Uuid
  name      String            @unique
  resumes   Resume[]          @relation("ResumePositions")
  desiredBy DesirePosition[]
}

model DesirePosition {
  id        String     @id @default(uuid()) @db.Uuid
  uid       String     @db.Uuid
  jid       String     @db.Uuid

  user      UserAuth   @relation(fields: [uid], references: [id], onDelete: Cascade)
  position  Position   @relation(fields: [jid], references: [id], onDelete: Cascade)

  @@unique([uid, jid])
  @@index([uid])
  @@index([jid])
}